// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package backtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BacktestClient is the client API for Backtest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacktestClient interface {
	RunBacktest(ctx context.Context, in *RunBacktestReq, opts ...grpc.CallOption) (*RunBacktestRes, error)
	RunBacktestStream(ctx context.Context, opts ...grpc.CallOption) (Backtest_RunBacktestStreamClient, error)
}

type backtestClient struct {
	cc grpc.ClientConnInterface
}

func NewBacktestClient(cc grpc.ClientConnInterface) BacktestClient {
	return &backtestClient{cc}
}

func (c *backtestClient) RunBacktest(ctx context.Context, in *RunBacktestReq, opts ...grpc.CallOption) (*RunBacktestRes, error) {
	out := new(RunBacktestRes)
	err := c.cc.Invoke(ctx, "/backtest.Backtest/RunBacktest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestClient) RunBacktestStream(ctx context.Context, opts ...grpc.CallOption) (Backtest_RunBacktestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backtest_ServiceDesc.Streams[0], "/backtest.Backtest/RunBacktestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &backtestRunBacktestStreamClient{stream}
	return x, nil
}

type Backtest_RunBacktestStreamClient interface {
	Send(*RunBacktestReq) error
	Recv() (*RunBacktestRes, error)
	grpc.ClientStream
}

type backtestRunBacktestStreamClient struct {
	grpc.ClientStream
}

func (x *backtestRunBacktestStreamClient) Send(m *RunBacktestReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backtestRunBacktestStreamClient) Recv() (*RunBacktestRes, error) {
	m := new(RunBacktestRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BacktestServer is the server API for Backtest service.
// All implementations must embed UnimplementedBacktestServer
// for forward compatibility
type BacktestServer interface {
	RunBacktest(context.Context, *RunBacktestReq) (*RunBacktestRes, error)
	RunBacktestStream(Backtest_RunBacktestStreamServer) error
	mustEmbedUnimplementedBacktestServer()
}

// UnimplementedBacktestServer must be embedded to have forward compatible implementations.
type UnimplementedBacktestServer struct {
}

func (UnimplementedBacktestServer) RunBacktest(context.Context, *RunBacktestReq) (*RunBacktestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBacktest not implemented")
}
func (UnimplementedBacktestServer) RunBacktestStream(Backtest_RunBacktestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RunBacktestStream not implemented")
}
func (UnimplementedBacktestServer) mustEmbedUnimplementedBacktestServer() {}

// UnsafeBacktestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacktestServer will
// result in compilation errors.
type UnsafeBacktestServer interface {
	mustEmbedUnimplementedBacktestServer()
}

func RegisterBacktestServer(s grpc.ServiceRegistrar, srv BacktestServer) {
	s.RegisterService(&Backtest_ServiceDesc, srv)
}

func _Backtest_RunBacktest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBacktestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServer).RunBacktest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backtest.Backtest/RunBacktest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServer).RunBacktest(ctx, req.(*RunBacktestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backtest_RunBacktestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BacktestServer).RunBacktestStream(&backtestRunBacktestStreamServer{stream})
}

type Backtest_RunBacktestStreamServer interface {
	Send(*RunBacktestRes) error
	Recv() (*RunBacktestReq, error)
	grpc.ServerStream
}

type backtestRunBacktestStreamServer struct {
	grpc.ServerStream
}

func (x *backtestRunBacktestStreamServer) Send(m *RunBacktestRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backtestRunBacktestStreamServer) Recv() (*RunBacktestReq, error) {
	m := new(RunBacktestReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Backtest_ServiceDesc is the grpc.ServiceDesc for Backtest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backtest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backtest.Backtest",
	HandlerType: (*BacktestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunBacktest",
			Handler:    _Backtest_RunBacktest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunBacktestStream",
			Handler:       _Backtest_RunBacktestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "backtest.proto",
}
